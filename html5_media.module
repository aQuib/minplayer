<?php

/**
 * Implements hook_theme
 */
function html5_media_theme() {
  $theme = array();

  // Create a media player theme.
  $theme['media_player'] = array(
    'render element' => 'element'
  );

  // Register the templates
  $templates = html5_media_get_template_info();
  foreach ($templates as $name => $info) {
    $theme['media_player_' . $name] = array(
      'template' => 'media_player_' . $name,
      'variables' => array('params' => NULL),
      'path' => $info['path']
    );
  }

  return $theme;
}

/**
 * Implements hook_library
 */
function html5_media_library() {
  $path = drupal_get_path('module', 'html5_media') . '/player';
  return array(
    'mediaplayer' => array(
      'title' => 'Media Player',
      'website' => 'http://drupal.org/project/html5_media',
      'version' => '1.0',
      'js' => array(
        $path . '/js/drupal.media.player.compressed.js' => array('group' => JS_LIBRARY)
      ),
      'dependencies' => array(
        array('system', 'ui.slider')
      )
    ),
    'mediaplayer_debug' => array(
      'title' => 'Media Player (Debug Mode)',
      'website' => 'http://drupal.org/project/html5_media',
      'version' => '1.0',
      'js' => array(
        $path . '/js/source/drupal.media.compatibility.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.flags.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.plugin.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.display.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.player.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.file.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.playLoader.base.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.players.base.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.players.html5.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.players.flash.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.players.minplayer.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.players.youtube.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.controllers.base.js' => array('group' => JS_LIBRARY),
        $path . '/js/source/drupal.media.templates.base.js' => array('group' => JS_LIBRARY)
      ),
      'dependencies' => array(
        array('system', 'ui.slider')
      )
    )
  );
}

/**
 * Returns all of the media template information.
 */
function html5_media_get_template_info() {

  // Implement hook_media_template
  $cache = cache_get('media_template_info');
  if ($cache) {
    return $cache->data;
  }
  else {
    // Invoke all media_template_info and then set the cache.
    $template_info = module_invoke_all('media_template_info');
    cache_set('media_template_info', $template_info);
    return $template_info;
  }
}

/**
 * Implements hook_media_template_info
 */
function html5_media_media_template_info() {
  $path = drupal_get_path('module', 'html5_media') . '/player/templates';
  return array(
    'default' => array(
      'path' => $path . '/default',
      'js' => array(
        $path . '/default/js/drupal.media.playLoader.default.js' => array('group' => JS_DEFAULT),
        $path . '/default/js/drupal.media.controllers.default.js' => array('group' => JS_DEFAULT),
        $path . '/default/js/jquery.media.templates.default.js' => array('group' => JS_DEFAULT)
      ),
      'css' => array(
        $path . '/default/css/media_player_default.css' => array('group' => CSS_DEFAULT)
      )
    )
  );
}

/**
 * Register a new media player in JavaScript.
 */
function html5_media_register_player($playerId, $settings, $attributes) {
  $attributes = drupal_json_encode($attributes);
  $settings = drupal_json_encode($settings);
  $swfplayer = url(drupal_get_path('module', 'html5_media') . '/player/minplayer/minplayer.swf');
  drupal_add_js("
    jQuery(function() {
      jQuery('#{$playerId}').mediaplayer({
        id:'#{$playerId}',
        attributes:{$attributes},
        settings:{$settings},
        swfplayer:'{$swfplayer}'
      });
    });
  ", 'inline');
}

/**
 * Theme a media player.
 */
function theme_media_player($variables) {
  // Get the template.
  $template = $variables['element']['#settings']['template'];

  // Add some variables that the template needs.
  $variables['player'] = theme('html_tag', $variables);
  $variables['settings'] = $variables['element']['#settings'];

  // Register the media player in JavaScript.
  html5_media_register_player($variables['settings']['id'], $variables['element']['#settings'], $variables['element']['#attributes']);

  // Return the theme for our media player.
  return theme('media_player_' . $template, $variables);
}

/**
 * Implements hook_field_formatter_info().
 */
function html5_media_field_formatter_info() {
  return array(
    'html5_audio' => array(
      'label' => t('Audio'),
      'description' => t('Play this file as audio.'),
      'field types' => array('file'),
      'settings' => array(
        'template' => 'default',
        'preload' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'width' => '100%',
        'height' => '350px',
        'debug' => FALSE
      )
    ),
    'html5_video' => array(
      'label' => t('Video'),
      'description' => t('Display this file as a video.'),
      'field types' => array('file'),
      'settings' => array(
        'template' => 'default',
        'preload' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'width' => '100%',
        'height' => '350px',
        'debug' => FALSE
      )
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form
 */
function html5_media_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if (($display['type'] == 'html5_audio') || ($display['type'] == 'html5_video')) {

    $templates = array_keys(html5_media_get_template_info());
    $templates = array_combine($templates, $templates);

    $element['template'] = array(
      '#title' => t('Template'),
      '#type' => 'select',
      '#options' => $templates,
      '#default_value' => $settings['template']
    );

    $element['preload'] = array(
      '#title' => t('Preload'),
      '#type' => 'checkbox',
      '#default_value' => $settings['preload']
    );

    $element['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'checkbox',
      '#default_value' => $settings['autoplay']
    );

    $element['loop'] = array(
      '#title' => t('Loop'),
      '#type' => 'checkbox',
      '#default_value' => $settings['loop']
    );

    $element['width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#default_value' => $settings['width']
    );

    $element['height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#default_value' => $settings['height']
    );

    $element['debug'] = array(
      '#title' => t('Debug Mode'),
      '#type' => 'checkbox',
      '#default_value' => $settings['debug']
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary
 */
function html5_media_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if (($display['type'] == 'html5_audio') || ($display['type'] == 'html5_video')) {
    $header = array('Setting', 'Value');
    $rows = array();
    foreach ($settings as $name => $value) {
      $rows[] = array($name, $value);
    }
    $summary = theme('table', array('header' => $header, 'rows' => $rows));
  }
  return $summary;
}

/**
 * Returns the settings for this video or audio element.
 */
function html5_media_get_attributes($item, $settings) {
  $attributes = array();

  $attributes['src'] = file_create_url($item['uri']);

  $element_settings = array('preload', 'autoplay', 'loop');
  foreach ($settings as $name => $value) {
    if ($value && in_array($name, $element_settings)) {
      $attributes[$name] = NULL;
    }
  }

  $attributes['id'] = $settings['id'] . '-player';
  $attributes['width'] = '100%';
  $attributes['height'] = '100%';

  return $attributes;
}

/**
 * Adds the media player resources to the view.
 */
function html5_media_add_resources($template, $debug) {
  static $resources_added = FALSE;
  if (!$resources_added) {

    // Add the media player library.
    drupal_add_library('html5_media', $debug ? 'mediaplayer_debug' : 'mediaplayer');

    // Get the template information.
    $templates = html5_media_get_template_info();

    // If this template exists, then...
    if (isset($templates[$template])) {

      // Store the template info.
      $template = $templates[$template];

      // Include all of the template files.
      if ($template['js']) {
        foreach ($template['js'] as $file => $options) {
          drupal_add_js($file, $options);
        }
      }
      if ($template['css']) {
        foreach ($template['css'] as $file => $options) {
          drupal_add_css($file, $options);
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function html5_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  // If this is an audio or a video player.
  if (in_array($display['type'], array('html5_audio', 'html5_video'))) {
    html5_media_add_resources($settings['template'], $settings['debug']);
    foreach ($items as $delta => $item) {
      $settings['id'] = 'player-' . drupal_clean_css_identifier($field['field_name']) . '-' . $delta;
      $element[$delta] = array(
        '#theme' => 'media_player',
        '#tag' => ($display['type'] == 'html5_video' ? 'video' : 'audio'),
        '#value' => '',
        '#attributes' => html5_media_get_attributes($item, $settings),
        '#settings' => $settings
      );
    }
  }

  return $element;
}
