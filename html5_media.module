<?php
/**
 * This module currently does not do anything.
 */

// Load all Field module hooks.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'html5_media') . '/html5_media.field.inc';


/**
 * Implements hook_theme().
 */
function html5_media_theme() {
  
  $template_path = drupal_get_path('module', 'html5_media') . '/templates';
  
  // Add the media render element.
  $theme['media_player'] = array(
    'variables' => array('params' => array()),
    'path' => $template_path,
    'template' => 'media_player'
  );
  
  // Add the media controls element.
  $theme['media_controls'] = array(
    'variables' => array('params' => array()),
    'path' => $template_path,
    'template' => 'media_controls'    
  );

  return $theme;
}

/**
 * Converts a Drupal file object into a source object for HTML5.
 * 
 * @param type $file 
 */
function html5_media_source($file) {
  return array(
    'src' => file_create_url($file['uri']),
    'type' => $file['filemime']
  );
}

/**
 * Converts the settings into an attributes array.
 */
function html5_media_attributes($settings) {
  $attributes = array();
  
  // Add the width.
  $attributes['width'] = isset($settings['width']) ? $settings['width'] : '550';
  
  // Add the height only if it is set.
  if( isset($settings['height']) && ($settings['height'] > 0) ) {
    $attributes['height'] = $settings['height'];
  }
  
  // Add the controls.
  $attributes['controls'] = NULL;
  return $attributes;
}

/**
 * Get's the media element info from other modules.
 * 
 * @return type 
 */
function html5_media_get_media_element_info() {
  
  // Get the info from cache.
  $info = cache_get('media_element_info', 'cache_media');
  if( $info ) {
    
    // Return immediately if the cache is set.
    return $info->data;
  }
  
  // Get the media element info.
  $info = module_invoke_all('media_element_info');
  cache_set('media_element_info', $info);
  return $info;
}

/**
 * Preprocess function for media_player
 */
function template_preprocess_media_player(&$variables) {
  $params = $variables['params'];
  $field_name = $params['#field']['field_name'];
  $langcode = $params['#entity']->language;
  
  // Add the files object to the variables.
  $variables['media_files'] = $params['#entity']->{$field_name}[$langcode];
  
  // Get the element type for this media based on the first file uploaded.
  $type = explode('/', $variables['media_files'][0]['filemime']);
  $type = $type[0];
  $variables['media_type'] = in_array($type, array('audio', 'video')) ? $type : 'div';
  
  // Get the attributes for this media element.
  $variables['media_attributes'] = html5_media_attributes($params['#instance']['settings']);
  
  // Allow other modules to add their own source's.
  $variables['media_plugins'] = array();
  $infos = html5_media_get_media_element_info();
  foreach( $infos as $plugin_type => $info ) {
    if( isset($info['plugin_callback']) ) {
      
      // Merge all the plugins into a single plugins array.
      $variables['media_plugins'][] = $info['plugin_callback']($variables);
    }
  }   
}

/**
 * Implements our own hook_media_element_info
 */
function html5_media_element_info() {
  return array(
    'controls' => array(
      'plugin_callback' => 'html5_media_controls'
    )
  );
}

/**
 * Returns a control bar template.
 * 
 * @param type $variables 
 */
function html5_media_controls($variables) {
  return theme('media_controls', $variables);
}

/**
 * API to get a media player display.
 */
function html5_media_get_player() {
  $args = func_get_args();
  $params = $args[0];
  
}