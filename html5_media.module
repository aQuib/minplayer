<?php
/**
 * Implements hook_theme
 */
function html5_media_theme() {
  $theme = array();
  
  // Create a media player theme.
  $theme['media_player'] = array(
    'render element' => 'element'
  );
  
  // Register the templates
  $templates_path = drupal_get_path('module', 'html5_media') . '/player/templates';
  foreach (html5_media_templates() as $template) {
    $path = $templates_path . '/' . $template;
    $theme['media_player_' . $template] = array(
      'template' => 'media_player_' . $template,
      'variables' => array('params' => NULL),
      'path' => $path
    );
    
  }
  
  return $theme;
}

/**
 * Register a new media player in JavaScript.
 */
function html5_media_register_player($playerId) {
  $playerId = check_plain($playerId);
  drupal_add_js("
    jQuery(function() {
      var playerId = '#{$playerId}';
      new Drupal.media.player(jQuery(playerId), {
        id:playerId
      });
    });
  ", 'inline');
}

/**
 * Returns the next player Id.
 */
function html5_media_get_player_id() {
  static $player_instance = 0;
  return 'player_' . $player_instance++;
}

/**
 * Theme a media player.
 */
function theme_media_player($variables) {
  // Get the template.
  $template = $variables['element']['#settings']['template'];
  
  // Add some variables that the template needs.
  $variables['player'] = theme('html_tag', $variables);
  $variables['settings'] = $variables['element']['#settings'];
  
  // Register the media player in JavaScript.
  html5_media_register_player($variables['settings']['id']);
  
  // Return the theme for our media player.
  return theme('media_player_' . $template, $variables);
}

/**
 * Returns all the media player templates.
 */
function html5_media_templates() {
  $cache = cache_get('media_player_templates');
  if ($cache) {
    return $cache->data;
  }
  
  // Get all the folders in the player templates directory.
  $templates = array();
  $template_dir = getcwd() . '/' . drupal_get_path('module', 'html5_media') . '/player/templates';
  if ($handle = opendir($template_dir)) {
    while (FALSE !== ($dir = readdir($handle))) {
      if ((strpos($dir, '.') === FALSE) && (is_dir($template_dir . '/' . $dir))) {
        $templates[$dir] = $dir;
      }
    }

    closedir($handle);
  }

  // Set this in cache...
  cache_set('media_player_templates', $templates);
  return $templates;  
}

/**
 * Implements hook_field_formatter_info().
 */
function html5_media_field_formatter_info() {
  return array(
    'html5_audio' => array(
      'label' => t('Audio'),
      'description' => t('Play this file as audio.'),
      'field types' => array('file'),
      'settings' => array(
        'template' => 'default',
        'preload' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'width' => '100%',
        'height' => '350px'
      )
    ),    
    'html5_video' => array(
      'label' => t('Video'),
      'description' => t('Display this file as a video.'),
      'field types' => array('file'),
      'settings' => array(
        'template' => 'default',
        'preload' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'width' => '100%',
        'height' => '350px'
      )
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form
 */
function html5_media_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if (($display['type'] == 'html5_audio') || ($display['type'] == 'html5_video')) {
    
    $element['template'] = array(
      '#title' => t('Template'),
      '#type' => 'select',
      '#options' => html5_media_templates(),
      '#default_value' => $settings['template']
    );
    
    $element['preload'] = array(
      '#title' => t('Preload'),
      '#type' => 'checkbox',
      '#default_value' => $settings['preload']
    );
    
    $element['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'checkbox',
      '#default_value' => $settings['autoplay']
    );
    
    $element['loop'] = array(
      '#title' => t('Loop'),
      '#type' => 'checkbox',
      '#default_value' => $settings['loop']
    );
    
    $element['width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#default_value' => $settings['width']
    );
    
    $element['height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#default_value' => $settings['height']
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary
 */
function html5_media_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if (($display['type'] == 'html5_audio') || ($display['type'] == 'html5_video')) {
    $header = array('Setting', 'Value');
    $rows = array();
    foreach ($settings as $name => $value) {
      $rows[] = array($name, $value);
    }
    $summary = theme('table', array('header' => $header, 'rows' => $rows));
  }
  return $summary;
}

/**
 * Returns the settings for this video or audio element.
 */
function html5_media_get_attributes($item, $settings) {
  $attributes = array();

  $attributes['src'] = file_create_url($item['uri']);
  
  $element_settings = array('preload', 'autoplay', 'loop');
  foreach ($settings as $name => $value) {
    if ($value && in_array($name, $element_settings)) {
      $attributes[$name] = NULL;
    }
  }
  
  $attributes['id'] = $settings['id'] . '_player';
  $attributes['width'] = '100%';
  $attributes['height'] = '100%';
  
  return $attributes;
}

/**
 * Adds the media player resources to the view.
 */
function html5_media_add_resources($template) {
  static $resources_added = FALSE;
  if (!$resources_added) {
    
    // Add the jQuery UI slider.
    drupal_add_library('system', 'ui.slider');
    
    // Add all the media player javascript files.
    $path = drupal_get_path('module', 'html5_media') . '/player/js/';

    drupal_add_js($path . 'drupal.media.compatibility.js');
    drupal_add_js($path . 'drupal.media.display.js');
    drupal_add_js($path . 'drupal.media.player.js');
    drupal_add_js($path . 'drupal.media.file.js');  
    drupal_add_js($path . 'drupal.media.players.base.js');
    drupal_add_js($path . 'drupal.media.players.html5.js');
    drupal_add_js($path . 'drupal.media.players.flash.js');
    drupal_add_js($path . 'drupal.media.controllers.base.js');
    drupal_add_js($path . 'drupal.media.controllers.default.js');
    drupal_add_js($path . 'drupal.media.templates.base.js');
    
    // Add the template resources.
    $path = drupal_get_path('module', 'html5_media') . '/player/templates/' . $template . '/';
    drupal_add_js($path . 'jquery.media.templates.' . $template . '.js');
    drupal_add_css($path . 'css/media_player_' . $template . '.css');    
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function html5_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];  
  $element = array();
  
  // If this is an audio or a video player.
  if (in_array($display['type'], array('html5_audio', 'html5_video'))) {
    $settings['id'] = html5_media_get_player_id();
    html5_media_add_resources($settings['template']);
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme' => 'media_player',
        '#tag' => ($display['type'] == 'html5_video' ? 'video' : 'audio'),
        '#value' => '',
        '#attributes' => html5_media_get_attributes($item, $settings),
        '#settings' => $settings
      );
    }
  }
  
  return $element;
}
